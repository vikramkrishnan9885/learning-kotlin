spring.application.name= Journaler API
server.port= 9000

logging.level.root=INFO
logging.level.com.journaler.api=DEBUG
logging.level.org.springframework.jdbc=ERROR

# Accessing Actuator endpoints
# Let's check out some endpoints that come with Actuator out of the box:
# /actuator/health: Application health
# /actuator/info: Application information
# /actuator/metrics: Metrics information for the application running
# /actuator/trace: Trace information for the last few HTTP requests

management.endpoints.web.exposure.include=*

# THE FOLLOWING CODE WAS LISTED IN THE BOOK: IT DOESN'T WORK
#endpoints.health.enabled=true
#endpoints.trace.enabled=true
#endpoints.info.enabled=true
#management.endpoints.metrics.enabled=true

# FOLLOW THIS URL'S INSTRUCTIONS INSTEAD:
# https://www.callicoder.com/spring-boot-actuator/
# ADD MICROMETER FOR PROMETHEUS
# https://www.callicoder.com/spring-boot-actuator-metrics-monitoring-dashboard-prometheus-grafana/


# DATABASE JPA PROPERTIES

# Path to the database:
spring.datasource.url=jdbc:mysql://localhost/journaler_api?useSSL=false&useUnicode=true&characterEncoding=utf-8

# Username and password
spring.datasource.username=root
#spring.datasource.password=YOUR_MYSQL_ROOT_PASSWORD

# Validate the connection before borrowing it from the pool:
spring.datasource.tomcat.test-on-borrow=true

# Connection validation interval:
spring.datasource.tomcat.validation-interval=30000

# Query used to validate connections from the pool before returning them to the caller:
spring.datasource.tomcat.validation-query=SELECT 1

# Flag to remove abandoned connections if they exceed the remove abandoned timeout:
spring.datasource.tomcat.remove-abandoned=true
spring.datasource.tomcat.remove-abandoned-timeout=10000

# Log the stack trace of abandoned connections:
spring.datasource.tomcat.log-abandoned=true

# Time in milliseconds to keep this connection:
spring.datasource.tomcat.max-age=1800000

# Log validation errors:
spring.datasource.tomcat.log-validation-errors=true

# A maximum number of active connections that can be allocated from the pool at the same time:
spring.datasource.tomcat.max-active=50

# A maximum number of idle connections that should be kept in the pool:
spring.datasource.tomcat.max-idle=10

# And finally, initialize the database using Hibernate:
spring.jpa.hibernate.ddl-auto=update
