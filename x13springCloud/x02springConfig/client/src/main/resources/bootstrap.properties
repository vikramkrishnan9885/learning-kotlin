spring.application.name=limits-service

#Active Profile - will relate to development properties file in the server.
#If this property is absent then,default profile will be activated which is
#the property file without any environment name at the end.
#spring.profiles.active=development

# N.B. this is the default:
spring.cloud.config.uri=http://localhost:8888

management.security.enabled=false
# management.security.enabled=false will disable the spring security on the management endpoints
# like /env, /refresh etc.
# This is for development settings, in production security should be enabled.


# @RefreshScope  will expose one endpoint  /refresh .
# It will useful whenever you do any changes in configuration in Git,
# you can trigger RefreshScopeRefreshedEvent  using Spring Boot Actuator Refresh endpoint
# /actuator/refresh .
# You need to add below property in bootstrap.properties of limits-service to enable actuator refresh endpoint.
management.endpoints.web.exposure.include=refresh
# Test Property Change
#
# Now we will do a property change and test if this can be reflected in the config client service
# without restarting any of the Microservices.
#
# Do some change, in the value of the msg property in the config-server-client-development.properties
# and check-in in the local git, then hit the http://localhost:8080/msg again in the browser,
# You will the old value only.
#
# To reflect the new value, we need to refresh the configuration by hitting http://localhost:8080/actuator/refresh endpoint
# using POST method from any of the REST client.
#
# Once you have successfully refreshed the config client service,
# the new value should be reflected in the service response.
# This is because @RefreshScope annotation the Rest Controller that we have exposed.
#